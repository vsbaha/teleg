from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from app import keyboard as kb
from app import database as db
from dotenv import load_dotenv
# import openai
import os
import logging

# –≠—Ç–æ –ª–æ–≥–∏
logging.basicConfig(level=logging.DEBUG)
storage = MemoryStorage()

# –≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∏–≥—Ä–∞–º
storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv('TOKEN_MAIN'))
dp = Dispatcher(bot, storage=storage)


# —ç—Ç–æ –ª—é–¥–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ
WHITE_LIST = [1189473577, 5038943885, 1992223776]

# —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç—Ä–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(_):
    await db.db_start()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


class MsgToAnon(StatesGroup):
    type = State()
    text = State()
    name = State()

# —ç—Ç–æ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–π–¥–∏
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await db.cmd_start_db(message.from_user.id)
    await message.answer_sticker('CAACAgEAAxkBAAMzZC3SnsEo6kiydveWR0vsy31b1GEAAgYAA1qqCUyCbvObrMeIKi8E')
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'üëãüëã–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.main_admin)
    elif message.from_user.id in WHITE_LIST:
        await message.answer(f'üëãüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫!', reply_markup=kb.main_class)
    else:
        await message.answer(f'{message.from_user.first_name},üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"', reply_markup=kb.unverified_one)

# —ç—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ —é–∑–µ—Ä–∞
@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
    await message.answer(f'{message.from_user.id}')

# —ç—Ç–æ –¥–ª—è –∞–π–¥–∏ —Å—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(content_types=['sticker'])
async def sticker_id(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(message.sticker.file_id)

# —ç—Ç–æ –≥–¥–∑ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
@dp.message_handler(text='4-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ!", reply_markup=kb.gdzlist_4_class)

@dp.message_handler(text='5-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ!", reply_markup=kb.gdzlist_5_class)

@dp.message_handler(text='6-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ!", reply_markup=kb.gdzlist_6_class)

@dp.message_handler(text='7-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–¥–∑ –¥–ª—è 7 –∫–ª–∞—Å—Å–∞", reply_markup=kb.gdzlist_7_class)

@dp.message_handler(text='8-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ!", reply_markup=kb.gdzlist_8_class)

@dp.message_handler(text='9-–∫–ª–∞—Å—Å')
async def gdz_4_class(message: types.Message):
    await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ!", reply_markup=kb.gdzlist_9_class)

# —ç—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–¥–∑
@dp.message_handler(text='üìÑ–ì–¥–∑')
async def gdz_lessons(message: types.Message):
    await message.answer(f"‚ùó–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ì–î–ó —Ç–æ–ª—å–∫–æ 7 –∫–ª–∞—Å—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ì–î–ó –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.", reply_markup=kb.gdz_class)


# —ç—Ç–æ –¥–ª—è –∏–∏
@dp.message_handler(text='ü§ñ–ù–µ–π—Ä–æ—Å–µ—Ç–∏')
async def bot(message: types.Message):
    await message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æc–µ—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å —É—Ä–æ–∫–∞–∏:\nChatGPT-–ù–∞–ø–∏—à–µ—Ç —ç—Å—Å–µ \nDALL-E-–ù–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É \nReText-–ü–µ—Ä–µ–¥–µ–ª–∞–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏", reply_markup=kb.ai)


# —ç—Ç–æ –±–µ–∫–∞–ø
@dp.message_handler(text='üñã–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def contacts(message: types.Message):
    await message.answer(f"üñã–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–∏–µ —Ç–æ —Å–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ç—å –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±–æ—Ç–∞", reply_markup=kb.help)


# —ç—Ç–æ —á–∞—Ç
@dp.message_handler(text='üë•–ß–∞—Ç')
async def chat(message: types.Message):
    await message.answer(f"üë•–ß–∞—Ç —Å —É—á–µ–Ω–∏–∫–∞–º–∏ 69 –≥–∏–º–∞–∑–∏–∏: ", reply_markup=kb.ch)


# —ç—Ç–æ –Ω–∞–∑–∞–¥
@dp.message_handler(text='‚Ü©–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    await message.answer(f'‚Ü©–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb.main_class)


# —ç—Ç–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message_handler(text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'log in', reply_markup=kb.adminpanel)
    else:
        await message.reply('error')

@dp.message_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–Ω–æ–Ω–∏–º–∫—É')
async def send_anon(message: types.Message):
    await MsgToAnon.type.set()
    await message.answer(f'—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=kb.ch)

@dp.callback_query_handler(state=MsgToAnon.type)
async def send_anon_type(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = call.data
    await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb.cancel)
    await MsgToAnon.next()

@dp.callback_query_handler(state=MsgToAnon.text)
async def send_anon_text(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = call.data
    await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ –ø–∏—Å–∞—Ç—å —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ(_)', reply_markup=kb.cancel)
    await MsgToAnon.next()

@dp.callback_query_handler(state=MsgToAnon.name)
async def send_anon_name(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = call.data
    await db.send_anon(state)
    await call.message.answer(f'Done!', reply_markup=kb.main_class)
    await state.finish()

# —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏(–Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å)
@dp.message_handler(text='–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è')
async def verify(message: types.Message):
    await message.answer(f'–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /id –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é"', reply_markup=kb.unverifiedtwo)

@dp.message_handler(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é')
async def verify_two(message: types.Message):
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: @soquoru')


# —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–æ–ø–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
@dp.message_handler()
async def answer(message: types.Message):
    await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω –±–æ—Ç—É.")

# —ç—Ç–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)



# response = openai.Completion.create(
#             model='text-davinci-003',
#             promt=message.text,
#             temperature=1,
#             max_tokens=2048,
#             top_p=0.7,
#             frequency_penalty=0
#               )
#               await bot.send_message(response['choices'][0]['text'])
