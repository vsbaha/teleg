from aiogram import Bot, Dispatcher, executor, types
from app import keyboard as kb
from app import database as db
from dotenv import load_dotenv
import openai
import os
import logging

logging.basicConfig(level=logging.DEBUG)


load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)

openai.api_key = os.getenv('CHAT_GPT')

async def on_startup(_):
    await db.db_start()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")



@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await db.cmd_start_db(message.from_user.id)
    await message.answer_sticker('CAACAgEAAxkBAAMzZC3SnsEo6kiydveWR0vsy31b1GEAAgYAA1qqCUyCbvObrMeIKi8E')
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=kb.main_admin)
    elif message.from_user.id == int(os.getenv('CLASS_BAKTIAR_ID')):
        await message.answer(f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫!', reply_markup=kb.main_class)
    elif message.from_user.id == int(os.getenv('TEST_MAMA_ID')):
        await message.answer(f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫!', reply_markup=kb.main_class)
    else:
        await message.answer(f'{message.from_user.first_name},üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"', reply_markup=kb.unverified_one)


@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
    await message.answer(f'{message.from_user.id}')

@dp.message_handler(content_types=['sticker'])
async def sticker_id(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(message.sticker.file_id)



@dp.message_handler(text='üìÑ–ì–¥–∑')
async def gdz(message: types.Message):
    await message.answer(f"‚ùó–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω –ì–î–ó —Ç–æ–ª—å–∫–æ 7 –∫–ª–∞—Å—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ì–î–ó –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.", reply_markup=kb.gdzlist)



@dp.message_handler(text='ü§ñ–ù–µ–π—Ä–æ—Å–µ—Ç–∏')
async def bot(message: types.Message):
    await message.answer(f"ü§ñ–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–∏—Ç–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å —É—Ä–æ–∫–∞–º–∏:'chatGPT-–ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Å—Å–µ –ª–∏–±–æ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∫–∏—Ö —Ç–æ –∑–∞–¥–∞–Ω–∏–π,"
                         f" DALL-E-–ù–∞—Ä–∏—Å—É–µ—Ç –≤–∞–º —Ä–∏—Å—É–Ω–æ–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                         f" ReText-–ø–µ—Ä–µ–ø–∏—à–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω—Ç–∏–ø–ª–∞–≥–∏—è—Ç–∞(–°–æ–≤–º–µ—Å—Ç–Ω–æ —Å chatGPT)", reply_markup=kb.ai)


@dp.message_handler(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ò–ò')
async def startgpt(message: types.Message):
    await message.answer(f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ò–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞", reply_markup=kb.startGPT)


@dp.callback_query_handler()
async def callback_query_keyboard(callback_query: types.CallbackQuery):
    if callback_query.data == 'chatGPT':
        response = openai.Completion.create(
            model='text-davinci-003',
            promt=callback_query.data,
            temperature=1,
            max_tokens=2048,
            top_p=0.7,
        )
        await bot.send_message(response['choices'][0]['text'])





@dp.message_handler(text='üñã–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def contacts(message: types.Message):
    await message.answer(f"üñã–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–∏–µ —Ç–æ —Å–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ç—å –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±–æ—Ç–∞", reply_markup=kb.help)


@dp.message_handler(text='üë•–ß–∞—Ç')
async def chat(message: types.Message):
    await message.answer(f"üë•–ß–∞—Ç —Å —É—á–µ–Ω–∏–∫–∞–º–∏ 69 –≥–∏–º–∞–∑–∏–∏: ", reply_markup=kb.ch)



@dp.message_handler(text='‚Ü©–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    await message.answer(f'‚Ü©–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb.main_class)

@dp.message_handler(text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'log in', reply_markup=kb.adminpanel)
    else:
        await message.reply('error')

@dp.message_handler(text='–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è')
async def verify(message: types.Message):
    await message.answer(f'–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /id –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é"', reply_markup=kb.unverifiedtwo)

@dp.message_handler(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é')
async def verify_two(message: types.Message):
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: @soquoru')



@dp.message_handler()
async def answer(message: types.Message):
    await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω –±–æ—Ç—É.")


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
